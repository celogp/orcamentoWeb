{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { CFG_URLAPI } from \"../app.config\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let localizacaoServico = /*#__PURE__*/(() => {\n  class localizacaoServico {\n    constructor(http) {\n      this.http = http;\n      this.LocalizacaoUrl = CFG_URLAPI.LocalizacaoUrl;\n      this.PesquisasUrl = CFG_URLAPI.PesquisasUrl;\n      this.ViaCepUrl = CFG_URLAPI.ViaCepUrl;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json; charset=UTF-8',\n          'Access-Control-Allow-Origin': '*'\n        }),\n        params: new HttpParams()\n      };\n    }\n\n    doGetUfs() {\n      return this.http.get(this.PesquisasUrl + 'doObterUfs');\n    }\n\n    doGetLocalizacoes() {\n      return this.http.get(this.LocalizacaoUrl + 'doObterTodos');\n    }\n\n    doAdicionar(_entity) {\n      return this.http.post(this.LocalizacaoUrl + 'doAdicionar', _entity, this.httpOptions);\n    }\n    /*     public doAdicionar(_entity : LocalizacaoEntity): Observable<ObjetoResposta>{\r\n            return this.http.post<ObjetoResposta>(this.LocalizacaoUrl + 'doAdicionar2', _entity, this.httpOptions)\r\n            .pipe(\r\n                retry(1),\r\n                catchError(this.processError)\r\n              );\r\n        }\r\n     */\n\n\n    doAtualizar(_entity) {\n      return this.http.put(this.LocalizacaoUrl + 'doAtualizar', _entity, this.httpOptions);\n    }\n\n    doApagar(_entity) {\n      let _params = new HttpParams();\n\n      _params = _params.append('id', _entity.id.toString());\n      this.httpOptions.params = _params;\n      return this.http.delete(this.LocalizacaoUrl + 'doApagar', this.httpOptions);\n    }\n\n    doPesquisarCep(_cep) {\n      let url = this.ViaCepUrl + _cep + '/json/';\n      return this.http.get(url);\n    }\n\n    processError(err) {\n      let message = '';\n\n      if (err.error instanceof ErrorEvent) {\n        message = err.error.message;\n      } else {\n        message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n      }\n\n      return throwError(message);\n    }\n\n  }\n\n  localizacaoServico.ɵfac = function localizacaoServico_Factory(t) {\n    return new (t || localizacaoServico)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  localizacaoServico.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: localizacaoServico,\n    factory: localizacaoServico.ɵfac\n  });\n  return localizacaoServico;\n})();","map":null,"metadata":{},"sourceType":"module"}